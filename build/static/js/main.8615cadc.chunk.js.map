{"version":3,"sources":["components/SearchFilter.js","components/Person.js","components/Persons.js","components/AddPerson.js","services/persons.js","components/Notification.js","components/ErrorNotification.js","App.js","index.js"],"names":["SearchFilter","searchTerm","searchTermUpdate","htmlFor","type","placeholder","value","onChange","id","Person","person","handleDelete","name","number","onClick","Persons","persons","filteredPersons","length","map","key","AddPerson","formSubmit","newName","nameChange","newNumber","numberChange","onSubmit","baseUrl","axios","get","then","response","data","newObject","post","delete","updatedObj","put","Notification","message","className","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","setSearchTerm","setFilteredPersons","setMessage","error","setError","useEffect","personService","initialPersons","evt","target","trimStart","personsArray","toUpperCase","searchUpper","newFilteredArray","filter","preventDefault","newNameUpper","match","per","newPerson","includes","selected","find","selectedPerson","updatedPerson","returnedPerson","window","confirm","setTimeout","catch","e","concat","personId","personToDel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8615cadc.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst SearchFilter = ({searchTerm, searchTermUpdate}) => (\r\n    <Fragment>\r\n        <label htmlFor=\"search\">{`Filter shown with  `}</label>\r\n        <input \r\n        type=\"text\"\r\n        placeholder=\"enter search term\"\r\n        value={searchTerm}\r\n        onChange={searchTermUpdate}\r\n        id=\"search\"\r\n        />\r\n    </Fragment>\r\n);\r\n\r\nexport default SearchFilter;","import React from 'react';\r\n\r\nconst Person = ({person, handleDelete}) => (\r\n    <div>\r\n        <span>{person.name} {person.number && person.number}</span>\r\n        <button \r\n            onClick={() => handleDelete(person.id)}\r\n        >\r\n            delete\r\n        </button>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Person;","import React from 'react';\r\nimport Person from './Person';\r\n\r\nconst Persons = ({persons, filteredPersons, handleDelete}) => {\r\n    const output = filteredPersons.length <= 0 ? \r\n    persons.map(person => <Person key={person.name} person={person} handleDelete={handleDelete} />) :\r\n    filteredPersons.map(person => <Person key={person.name} person={person} handleDelete={handleDelete} />)\r\n    return output;\r\n};\r\n    \r\nexport default Persons;\r\n    \r\n","import React from 'react';\r\n\r\nconst AddPerson = ({formSubmit, newName, nameChange, newNumber, numberChange}) => (\r\n    <form onSubmit={formSubmit}>\r\n        <div>\r\n        name: <input \r\n                type=\"text\"\r\n                placeholder=\"Please enter name\"\r\n                value={newName} \r\n                onChange={nameChange}\r\n            />\r\n        </div>\r\n        <div>\r\n        number: <input \r\n                    type=\"tel\"\r\n                    placeholder=\"Please enter phone #\"\r\n                    value={newNumber} \r\n                    onChange={numberChange}\r\n                />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nexport default AddPerson;","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst deleteItem = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst updateNumber = (id, updatedObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedObj);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nexport default {getAll, create, deleteItem, updateNumber};","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null) {\r\n        return null;\r\n    } else {\r\n        return (\r\n            <div className=\"message\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst ErrorNotification = ({message}) => (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n);\r\n\r\nexport default ErrorNotification;","import React, { useState, useEffect } from 'react';\r\nimport SearchFilter from './components/SearchFilter';\r\nimport Persons from './components/Persons';\r\nimport AddPerson from './components/AddPerson';\r\nimport personService from './services/persons';\r\nimport Notification from './components/Notification';\r\nimport ErrorNotification from './components/ErrorNotification';\r\n\r\nconst App = () => {\r\n  // COMPONENT STATE.\r\n  const [ persons, setPersons ] = useState([]);\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ searchTerm, setSearchTerm ] = useState('');\r\n  const [ filteredPersons, setFilteredPersons ] = useState([]);\r\n  const [message, setMessage] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    personService.getAll()\r\n    .then (initialPersons => {\r\n      setPersons(initialPersons);\r\n    });\r\n  }, [])\r\n\r\n  const nameChange = (evt) => {\r\n    const value = evt.target.value.trimStart();\r\n    setNewName(value);\r\n  };\r\n\r\n  const numberChange = (evt) => {\r\n    const number = evt.target.value.trimStart();\r\n    setNewNumber(number);\r\n  }\r\n\r\n  const searchTermUpdate = (evt) => {\r\n    const searchTerm = evt.target.value.trimStart();\r\n    setSearchTerm(searchTerm);\r\n    // Create a new persons array with every person's name in uppercase characters.\r\n    const personsArray = persons.map(person => {\r\n      return {\r\n        name: person.name.toUpperCase(),\r\n        number: person.number\r\n      }\r\n    });\r\n    // Convert searchTerm piece of state to uppercase.\r\n    const searchUpper = searchTerm.toUpperCase();\r\n    // set filteredPersons to array of elements that match the search term.\r\n    const newFilteredArray = personsArray.filter(person => person.name === searchUpper);\r\n    setFilteredPersons(newFilteredArray.length > 0 ? newFilteredArray : []);\r\n  };\r\n\r\n  const formSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    // Create a new persons array with every user name in uppercase characters.\r\n    const personsArray = persons.map(person => {\r\n      let newPerson;\r\n      newPerson = {\r\n        ...person,\r\n        name: person.name.toUpperCase()\r\n      }\r\n      return newPerson;\r\n    });\r\n    const newNameUpper = newName.toUpperCase();\r\n    const matchingPersons = personsArray.filter(person => person.name === newNameUpper);\r\n    const match = matchingPersons.map(per => per.name);\r\n    // Create newPerson object to be added to persons array piece of component state.\r\n    const newPerson = {\r\n      name: newName,\r\n      number: newNumber\r\n    };\r\n\r\n    if(match.includes(newNameUpper) && newNumber !== '') {\r\n          const selected = personsArray.find(person => person.name === newNameUpper);\r\n          const selectedPerson = persons.find(person => person.id === selected.id);\r\n    //       // Selected Person's id property.\r\n          const id = selectedPerson.id;\r\n    //       // Update person's object, overwriting the number property on the object.\r\n          const updatedPerson = {...selectedPerson, number: newPerson.number};\r\n          personService.updateNumber(id, updatedPerson)\r\n          .then(returnedPerson => {\r\n            if(window.confirm(`${newPerson.name} is already added to the phonebook, replace the old number with a new one?`)) {\r\n              setPersons(persons.map(per => per.id === id ? returnedPerson : per))\r\n              setMessage(`Added phone number for ${returnedPerson.name}`);\r\n              setTimeout(() => {\r\n                setMessage(null);\r\n              }, 5000)\r\n            } else {\r\n              // Do nothing.\r\n            }\r\n          })\r\n          .catch(e => {\r\n            setError(e.response.data.error);\r\n            setTimeout(() => {\r\n              setError(null);\r\n            }, 5000)\r\n          })\r\n      } else {\r\n        personService.create(newPerson)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n          setMessage(`Added ${returnedPerson.name}`);\r\n          setTimeout(() => {\r\n            setMessage(null);\r\n          }, 5000)\r\n        })\r\n        .catch(e => {\r\n          setError(e.response.data.error);\r\n          setTimeout(() => {\r\n            setError(null);\r\n          }, 5000)\r\n        })\r\n\r\n    }\r\n    // Reset both input fields value to an empty string.\r\n    setNewName('');\r\n    setNewNumber('');\r\n  }\r\n\r\n  const deletePerson = (personId) => {\r\n    const personToDel = persons.find(person => person.id === personId);\r\n    if(window.confirm(`Delete ${personToDel.name}?`)) {\r\n      personService.deleteItem(personId)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.filter(person => person.id !== personId))\r\n        setMessage('Deleted ' + personToDel.name);\r\n        setTimeout(() => {\r\n          setMessage(null);\r\n        }, 5000)\r\n      })\r\n      .catch(e => {\r\n        setError(`${personToDel.name} has already been removed from server.`);\r\n        setPersons(persons.filter(person => person.id !== personToDel.id));\r\n        setTimeout(() => {\r\n          setError(null);\r\n        }, 5000)\r\n      });\r\n    } else {\r\n      //  do nothing.\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Notification message={message} />\r\n      {error !== null && <ErrorNotification message={error} />}\r\n      <h1>Phonebook</h1>\r\n      <SearchFilter searchTerm={searchTerm} searchTermUpdate={searchTermUpdate} />\r\n      <h2>add a new</h2>\r\n      <AddPerson \r\n        newName={newName}\r\n        nameChange={nameChange}\r\n        formSubmit={formSubmit}\r\n        newNumber={newNumber}\r\n        numberChange={numberChange}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Persons \r\n        persons={persons} \r\n        filteredPersons={filteredPersons} \r\n        handleDelete={deletePerson}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n    // // Check whether persons array already contains the name of user attempting to be added.\r\n    // if(match.includes(newNameUpper)) {\r\n    //   // Check whether newly added person's number value is not an empty string.\r\n    //   if(newPerson.number !== '') {\r\n    //     // If number is not an empty string then confirm updating person's number.\r\n    //     if(window.confirm(`${newPerson.name} is already added to the phonebook, replace the old number with a new one?`)) {\r\n    //       const selected = personsArray.find(person => person.name === newNameUpper);\r\n    //       const selectedPerson = persons.find(person => person.id === selected.id);\r\n    //       // Selected Person's id property.\r\n    //       const id = selectedPerson.id;\r\n    //       // Update person's object, overwriting the number property on the object.\r\n    //       const updatedPerson = {...selectedPerson, number: newPerson.number};\r\n    //       personService.updateNumber(id, updatedPerson)\r\n    //       .then(returnedPerson => {\r\n    //         setPersons(persons.map(per => per.id === id ? returnedPerson : per))\r\n    //         setMessage(`Added phone number for ${returnedPerson.name}`);\r\n    //         setTimeout(() => {\r\n    //           setMessage(null);\r\n    //         }, 5000)\r\n    //       })\r\n    //       .catch(e => {\r\n    //         setError(`Cannot add phone number since ${updatedPerson.name} has already been deleted from server.`);\r\n    //         setPersons(persons.filter(person => person.id !== updatedPerson.id));\r\n    //         setTimeout(() => {\r\n    //           setError(null);\r\n    //         }, 5000)\r\n    //       })\r\n    //     } else {\r\n    //       // DO nothing.\r\n    //     }\r\n    //   } else {\r\n    //     alert(`Sorry ${newPerson.name} has already been added to the phonebook!`);\r\n    //   }\r\n    //   // const per = personsArray.find(per => per.name === newNameUpper);\r\n    // } else {\r\n    //   personService.create(newPerson)\r\n    //   .then(returnedPerson => {\r\n    //     // setPersons(persons.concat(returnedPerson))\r\n    //     setMessage(`Added ${returnedPerson.name}`);\r\n    //     setTimeout(() => {\r\n    //       setMessage(null);\r\n    //     }, 5000)\r\n    //   })\r\n    //   .catch(e => {\r\n    //     console.log(e.response.data.error);\r\n    //     setError(e.response.data.error);\r\n    //     setTimeout(() => {\r\n    //       setError(null);\r\n    //     }, 5000)\r\n    //   })\r\n    //     // alert('Unable to complete request, please try again!'))\r\n    // }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// styles.\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}